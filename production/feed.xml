<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
  <atom:link href="http://www.princeton.edu/~crmarsh/feed.xml" rel="self" type="application/rss+xml" />
  <title>Charles Marsh's Blog</title>
  <link>http://www.princeton.edu/~crmarsh</link>
  <description>Articles and thoughts on programming and computer science</description>
  <language>en-us</language>
  <item>
    <title>PhantomJS: Common Gotchas for Beginners</title>
    <link>http://www.princeton.edu/~crmarsh/phantomjs/index.html</link>
    <description>Over the summer, I had a pet project involving browser automation with PhantomJS. My experience was mixed, and in this post, I'd like to go through some of the common gotchas and things I wish I'd known beforehand.</description>
    <guid>http://www.princeton.edu/~crmarsh/phantomjs/index.html</guid>
  </item>
  <item>
    <title>What's Your Favorite Flavor (of JavaScript)?</title>
    <link>http://www.princeton.edu/~crmarsh/compiling_to_js/</link>
    <description>These days, it seems like all the hot languages compile to JavaScript. But each of these variants were conceived by different creators with different goals in mind. Which one is right for you?</description>
    <guid>http://www.princeton.edu/~crmarsh/compiling_to_js/</guid>
  </item>
  <item>
    <title>The Idiot-Proof Guide to Setting Up Your Personal EC2 Instance</title>
    <link>http://www.princeton.edu/~crmarsh/aws/</link>
    <description>I like SSHing into things, so I went ahead and setup my own AWS EC2 instance. But it took me awhile to get things up and running properly. Here, I've pulled together the assorted posts and resources that I used to setup my EC2 instance and assembled The Idiot-Proof Guide.</description>
    <guid>http://www.princeton.edu/~crmarsh/aws/</guid>
  </item>
  <item>
    <title>Binomial Heaps: Merge Better</title>
    <link>http://www.princeton.edu/~crmarsh/binomial_heaps/</link>
    <description>The other day, I was introduced to a really cool data structure: the binomial heap. You might be familiar with binary heaps, which use a binary tree to keep items in heap order; but binomial heaps are a little more obscure and, in some cases, more powerful.</description>
    <guid>http://www.princeton.edu/~crmarsh/binomial_heaps/</guid>
  </item>
  <item>
    <title>Setting Up Your OCaml Development Environment on OS X</title>
    <link>http://www.princeton.edu/~crmarsh/ocaml_dev_environment/</link>
    <description>OCaml isn’t that widely used and, as a result, there aren’t very many good guides out there for setting up an OCaml development environment. In this post, I’ll provide a couple of choices for setting up such an environment when developing on a Mac with in-depth instructions.</description>
    <guid>http://www.princeton.edu/~crmarsh/ocaml_dev_environment/</guid>
  </item>
  <item>
    <title>Kernighan: Programming Languages and the Solutions They Suggest</title>
    <link>http://www.princeton.edu/~crmarsh/programming_languages/</link>
    <description>I’m in Brian Kernighan’s Advanced Programming Techniques class at Princeton (COS 333). He’s a brilliant guy with an absurdly rich history in the field of programming. Here, I share some of his comments.</description>
    <guid>http://www.princeton.edu/~crmarsh/programming_languages/</guid>
  </item>
  <item>
    <title>First Thoughts on OCaml</title>
    <link>http://www.princeton.edu/~crmarsh/intro_to_ocaml/</link>
    <description>I’ve been learning to program in OCaml for one of my courses this semester (COS 326: Functional Programming) and I can't remember the last time I was this excited about anything CS-related.</description>
    <guid>http://www.princeton.edu/~crmarsh/intro_to_ocaml/</guid>
  </item>
  <item>
    <title>Rule Optimization in Software-Defined Networks</title>
    <link>http://www.princeton.edu/~crmarsh/intro_to_sdn/</link>
    <description>Software-Defined Networking (SDN) is a hot new approach to networks. Here, I discuss some of the distinctive characteristics and challenges associated with SDNs.</description>
    <guid>http://www.princeton.edu/~crmarsh/intro_to_sdn/</guid>
  </item>
  <item>
    <title>Streams and Lazy Computation</title>
    <link>http://www.princeton.edu/~crmarsh/streams/</link>
    <description>I was recently introduced to lazy computation in the context of streams—very cool (and powerful) stuff. In this post, I’ll go through streams first, then use lazy computation to address a problem specific to the data type before closing with an example.</description>
    <guid>http://www.princeton.edu/~crmarsh/streams/</guid>
  </item>
  <item>
    <title>True Parallelism in OCaml</title>
    <link>http://www.princeton.edu/~crmarsh/ocaml_parallelism/</link>
    <description>OCaml provides a nice library for multi-threading; however, under the hood, OCaml doesn't actually employ any parallelism at all! In this post, I outline an alternative model for parallel computation that utilizes separate UNIX processes.</description>
    <guid>http://www.princeton.edu/~crmarsh/ocaml_parallelism/</guid>
  </item>
  <item>
    <title>A Human-Friendly API for Wikipedia</title>
    <link>http://www.princeton.edu/~crmarsh/wikipedia/</link>
    <description>There's a lot of information on Wikipedia, and people want to use it. Sometimes, these people are programmers; and sometimes, their customers aren't computers.</description>
    <guid>http://www.princeton.edu/~crmarsh/wikipedia/</guid>
  </item>
  <item>
    <title>Quizzler: Automatic Quiz-Question Generation</title>
    <link>http://www.princeton.edu/~crmarsh/hack/</link>
    <description>After playing a number of poorly-made iPhone quiz games, I decided to roll my own. But I didn't want to spend time creating my own corpus of questions. Thus, Quizzler was born, an attempt to build an iPhone quiz app that generates its own questions.</description>
    <guid>http://www.princeton.edu/~crmarsh/hack/</guid>
  </item>
  <item>
    <title>Prefix-Based vs. Ternary Predicate Matching</title>
    <link>http://www.princeton.edu/~crmarsh/prefix_vs_ternary/</link>
    <description>In network switches, rules can be defined using various wildcard formats. I’ve been focusing on two specific and closely related variants. In this post, I'll outline two algorithms for compressing rules tables with these predicate formats.</description>
    <guid>http://www.princeton.edu/~crmarsh/prefix_vs_ternary/</guid>
  </item>
  <item>
    <title>A Dynamic Graphing Interface for iOS</title>
    <link>http://www.princeton.edu/~crmarsh/ios_graphing/</link>
    <description>In this post, I describe a small iOS interface I developed (just for kicks) that handles dynamic graphing.</description>
    <guid>http://www.princeton.edu/~crmarsh/ios_graphing/</guid>
  </item>
  <item>
    <title>iOS Performance: Shadows with Bezier Paths</title>
    <link>http://www.princeton.edu/~crmarsh/ios_performance/</link>
    <description>iOS performance optimizations are often subtle but logical. Here, I discuss a specific fix I implemented for drawing shadow paths.</description>
    <guid>http://www.princeton.edu/~crmarsh/ios_performance/</guid>
  </item>
  <item>
    <title>Statistics in Basketball: What's a "Good" Player?</title>
    <link>http://www.princeton.edu/~crmarsh/statistics_in_basketball/</link>
    <description>Bill Simmons' The Book of Basketball got me thinking: what would we want the ultimate player metric to capture?</description>
    <guid>http://www.princeton.edu/~crmarsh/statistics_in_basketball/</guid>
  </item>
  <item>
    <title>A Guide to CS Independent Work at Princeton</title>
    <link>http://www.princeton.edu/~crmarsh/independent_work/</link>
    <description>Learn the tips and tricks to suceed in your undergraduate Independent Work.</description>
    <guid>http://www.princeton.edu/~crmarsh/independent_work/</guid>
  </item>
</channel>
</rss>
